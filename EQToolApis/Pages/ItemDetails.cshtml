@page "/ItemDetails/{itemid}"
@model EQToolApis.Pages.ItemDetailsModel
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.2/css/bootstrap.min.css" integrity="sha512-rt/SrQ4UNIaGfDyEXZtNcyWvQeOq0QLygHluFQcSjaGB04IxWhal71tKuzP6K8eYXYB6vJV4pHkXcmFGGQ1/0w==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.min.js" integrity="sha512-pumBsjNRGGqkPzKHndZMaAG+bir374sORyzM3uulLV14lN5LyykqNk8eEeUlUkB3U0M4FApyaHraT65ihJhDpQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link href="https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/1.1.2/css/bootstrap-multiselect.min.css" integrity="sha512-fZNmykQ6RlCyzGl9he+ScLrlU0LWeaR6MO/Kq9lelfXOw54O63gizFMSD5fVgZvU1YfDIc6mxom5n60qJ1nCrQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <script type="text/javascript" src="https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.2/js/bootstrap.bundle.min.js" integrity="sha512-igl8WEUuas9k5dtnhKqyyld6TzzRjvMqLC79jkgT3z02FvJyHAuUtyemm/P/jYSne1xwFI06ezQxEwweaiV7VA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/1.1.2/js/bootstrap-multiselect.min.js" integrity="sha512-lxQ4VnKKW7foGFV6L9zlSe+6QppP9B2t+tMMaV4s4iqAv4iHIyXED7O+fke1VeLNaRdoVkVt8Hw/jmZ+XocsXQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.2.1/chart.umd.js" integrity="sha512-vCUbejtS+HcWYtDHRF2T5B0BKwVG/CLeuew5uT2AiX4SJ2Wff52+kfgONvtdATqkqQMC9Ye5K+Td0OTaz+P7cw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.0/moment.min.js" integrity="sha512-Izh34nqeeR7/nwthfeE0SI3c8uhFSnqxV0sI9TvTcXiFJkMd6fB644O64BRq2P/LA/+7eRvCw4GmLsXksyTHBg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-adapter-moment/1.0.1/chartjs-adapter-moment.min.js" integrity="sha512-hVy4KxCKgnXi2ok7rlnlPma4JHXI1VPQeempoaclV1GwRHrDeaiuS1pI6DVldaj5oh6Opy2XJ2CTljQLPkaMrQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-annotation/2.2.1/chartjs-plugin-annotation.min.js" integrity="sha512-qF3T5CaMgSRNrxzu69V3ZrYGnrbRMIqrkE+OrE01DDsYDNo8R1VrtYL8pk+fqhKxUBXQ2z+yV/irk+AbbHtBAg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
        let originaldata = [];
        Chart.register('chartjs-plugin-annotation');
        $(document).ready(function () {
            $('#nodmfforyou').hide();
            function average(ctx) {
                if (ctx.chart.data.datasets.length == 0) {
                    return 0;
                }
                let values = [];
                ctx.chart.data.datasets.forEach(a => {
                    a.data.forEach(a => {
                        if (a.y > 1) {
                            values.push(a.y);
                        }
                    });
                });
                var m = values.reduce((a, b) => {
                    let k = a + b;
                    return k;
                }
                    , 0);
                let v = m / values.length;
                return v;
            }

            function standardDeviation(ctx) {
                if (ctx.chart.data.datasets.length == 0) {
                    return 0;
                }
                let values = [];
                ctx.chart.data.datasets.forEach(a => {
                    a.data.forEach(a => {
                        if (a.y > 1) {
                            values.push(a.y);
                        }
                    });
                });
                const n = values.length;
                const mean = average(ctx);
                let v = Math.sqrt(values.map(x => Math.pow(x - mean, 2)).reduce((a, b) => (a + b)) / n) * 3;
                return v;
            }
            const annotation1 = {
                type: 'line',
                borderColor: 'rgb(100,149,237)',
                borderDash: [6, 6],
                borderDashOffset: 0,
                borderWidth: 3,
                label: {
                    enabled: true,
                    backgroundColor: 'rgba(100,149,237)',
                    content: (ctx) => 'Average: ' + average(ctx).toFixed(2)
                },
                scaleID: 'y',
                value: (ctx) => average(ctx)
            };
            const annotation2 = {
                type: 'line',
                borderColor: 'rgba(102,102,102,0.5)',
                borderDash: [6, 6],
                borderDashOffset: 0,
                borderWidth: 3,
                label: {
                    enabled: true,
                    backgroundColor: 'rgba(102,102,102,0.5)',
                    color: 'black',
                    content: (ctx) => (average(ctx) + standardDeviation(ctx)).toFixed(2),
                    position: 'start',
                    rotation: -90,
                    yAdjust: -28
                },
                scaleID: 'y',
                value: (ctx) => average(ctx) + standardDeviation(ctx)
            };

            const annotation3 = {
                type: 'line',
                borderColor: 'rgba(102,102,102,0.5)',
                borderDash: [6, 6],
                borderDashOffset: 0,
                borderWidth: 3,
                label: {
                    enabled: true,
                    backgroundColor: 'rgba(102,102,102,0.5)',
                    color: 'black',
                    content: (ctx) => (average(ctx) - standardDeviation(ctx)).toFixed(2),
                    position: 'end',
                    rotation: 90,
                    yAdjust: 28
                },
                scaleID: 'y',
                value: (ctx) => average(ctx) - standardDeviation(ctx)
            };

            var table;
            var chart = new Chart(document.getElementById('myChart'), {
                type: 'scatter',
                data: {
                    datasets: []
                },
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    animation: false,
                    spanGaps: true, // enable for all datasets
                    scales: {
                        x: {
                            type: 'time',
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            animation: {
                                duration: 0
                            },
                            callbacks: {
                                label: function (TooltipItem) {
                                    return TooltipItem.dataset.label + ' ' + TooltipItem.raw.extradata.u + ' ' + TooltipItem.parsed.y + 'pp';
                                }
                            }
                        },
                        annotation: {
                            annotations: {
                                annotation1,
                                annotation2,
                                annotation3
                            }
                        }
                    }
                }
            });
            function updatedata() {
                console.log('rebuilding data');
                let playeridstoshow = [];
                let playerkeywordstofilter = [];
                $('#playerselect :selected').each(function (i, value) {
                    playeridstoshow.push(+value.value);
                    playerkeywordstofilter.push(value.text);
                });
                let playerstoshow = playerkeywordstofilter.join(' ');
                table.setFilter("n", "keywords", playerstoshow, { matchAll: false });
                let data = {
                    items: originaldata.items.filter(a => playeridstoshow.includes(a.i)),
                    players: originaldata.players,
                    itemName: originaldata.itemName
                }
                let chartdata = [];
                if (data.items) {
                    let itemsbyplayer = data.items.reduce(function (r, a) {
                        r[a.i] = r[a.i] || [];
                        r[a.i].push(a);
                        return r;
                    }, Object.create(null));
                    let everyoneelselist =
                    {
                        label: 'Others',
                        data: []
                    };
                    Object.entries(itemsbyplayer).forEach(itemsplayer => {
                        let id = itemsplayer[0];
                        let itemsbyplayer =
                        {
                            label: data.players[id],
                            data: []
                        };
                        let shouldadd = false;
                        let itemarray = itemsplayer[1];
                        for (let j = 0; j < itemarray.length; j++) {
                            if (itemarray[j].p) {
                                shouldadd = true;
                                itemsbyplayer.data.push({ x: itemarray[j].t, y: itemarray[j].p, extradata: itemarray[j] });
                            }
                        }
                        if (shouldadd) {
                            chartdata.push(itemsbyplayer);
                        }
                    });
                }
                chart.data.datasets = chartdata;
                chart.update();
            }

            $.get("/api/item/getdetails/@Model.ItemId", function (data, status) {
                originaldata = data; 
                document.getElementById('ItemName').innerHTML = `<a href="https://wiki.project1999.com/${data.itemName.replace(' ', '_')}" target = "_blank"> ${data.itemName} <i class="fa fa-external-link"></i></a >`;
                document.title = data.itemName;
                let pl = [];
                for (let key in data.players) {
                    let value = data.players[key];
                    let count = 0;
                    for (let i = 0; i < data.items.length; i++) {
                        if (data.items[i].p && key == data.items[i].i) {
                            count += 1;
                        }
                    }
                    if (count > 0) {
                        pl.push({ count: count, key: key })
                    }
                }

                pl = pl.sort(function (a, b) {
                    return b.count - a.count;
                });
                pl.forEach(a => {
                    let value = data.players[a.key];
                    $('#playerselect').append(`<option value="${a.key}" selected>${value} (${a.count})</option>`);

                });
                $('#playerselect').multiselect({
                    includeSelectAllOption: true,
                    enableFiltering: true,
                    maxHeight: 200,
                    filterBehavior: 'text',
                    enableCaseInsensitiveFiltering: true,
                    onSelectAll: function (options) { updatedata(); },
                    onChange: function (option, checked, select) { updatedata(); }

                });
                if (data.items) {
                    for (let i = 0; i < data.items.length; i++) {
                        if (data.items[i].u == 0) {
                            data.items[i].u = 'WTS';
                        } else if (data.items[i].u == 1) {
                            data.items[i].u = 'WTB';
                        } else if (data.items[i].u == 2) {
                            data.items[i].u = 'BOTH';
                        }
                        let tunnelTimestamp = data.items[i].t;
                        let d = new Date(tunnelTimestamp);
                        data.items[i].t = d;
                        data.items[i].n = data.players[data.items[i].i];
                    }
                }
                let ele = document.getElementById('TableData');
                table = new Tabulator(ele,
                    {
                        maxHeight: "100%",
                        layout: "fitDataStretch",
                        data: data.items, //set initial table data
                        columns: [
                            { title: "Type", field: "u" },
                            { title: "Player Name", field: "n" },
                            {
                                title: "Auction Price", field: "p",
                                formatter: function (cell, formatterParams) {
                                    let price = cell.getRow().getData().p;
                                    return price ? price + "pp" : '';
                                }
                            },
                            {
                                title: "Timestamp",
                                field: "t",
                                sorter: function (a, b, aRow, bRow, column, dir, sorterParams) {
                                    //a, b - the two values being compared
                                    //aRow, bRow - the row components for the values being compared (useful if you need to access additional fields in the row data for the sort)
                                    //column - the column component for the column being sorted
                                    //dir - the direction of the sort ("asc" or "desc")
                                    //sorterParams - sorterParams object from column definition array
                                    return a.getTime() - b.getTime();
                                },
                                formatter: function (cell, formatterParams) {
                                    return cell.getRow().getData().t.toLocaleString();
                                }
                            }
                        ],
                        progressiveRender: true, //enable progressive rendering
                        progressiveRenderSize: 500, //sets the number of rows to render per block (default = 20)
                        progressiveRenderMargin: 350
                    });
                updatedata();
            });
        });
    </script>
</head>

<body>
    <div class="row">
        <div class="col-12">
            <button type="button" onclick="history.back()" class="btn btn-primary float-left">Go Back</button>
            <h3 id="ItemName" class="float-left ml-5 mr-2"></h3>
            <small>Center Line is the mean, top and bottom lines are 3 standard deviations from the mean!</small>
        </div>
    </div>

    <div class="w-100" style="height: 30vh!important;">
        <canvas id="myChart" class="h-100"></canvas>
    </div>
    <div class="row">
        <div class="col-12">
            <h5 class="float-left">Players:  <select id="playerselect" multiple="multiple"></select></h5> 
        </div>
    </div>
    <div class="w-100" style="height: 60vh!important;">
        <div id="TableData"></div>
    </div>

</body>
</html>

